# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:34:47+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field


class Empty(BaseModel):
    pass


class OperatingSystemType(Enum):
    OPERATING_SYSTEM_TYPE_UNSPECIFIED = 'OPERATING_SYSTEM_TYPE_UNSPECIFIED'
    LINUX = 'LINUX'
    WINDOWS = 'WINDOWS'


class PosixAccount(BaseModel):
    accountId: Optional[str] = Field(
        None, description='Output only. A POSIX account identifier.'
    )
    gecos: Optional[str] = Field(
        None, description='The GECOS (user information) entry for this account.'
    )
    gid: Optional[str] = Field(None, description='The default group ID.')
    homeDirectory: Optional[str] = Field(
        None, description='The path to the home directory for this account.'
    )
    name: Optional[str] = Field(
        None, description='Output only. The canonical resource name.'
    )
    operatingSystemType: Optional[OperatingSystemType] = Field(
        None, description='The operating system type where this account applies.'
    )
    primary: Optional[bool] = Field(
        None, description='Only one POSIX account can be marked as primary.'
    )
    shell: Optional[str] = Field(
        None, description='The path to the logic shell for this account.'
    )
    systemId: Optional[str] = Field(
        None,
        description='System identifier for which account the username or uid applies to. By default, the empty value is used.',
    )
    uid: Optional[str] = Field(None, description='The user ID.')
    username: Optional[str] = Field(
        None, description='The username of the POSIX account.'
    )


class SshPublicKey(BaseModel):
    expirationTimeUsec: Optional[str] = Field(
        None, description='An expiration time in microseconds since epoch.'
    )
    fingerprint: Optional[str] = Field(
        None, description='Output only. The SHA-256 fingerprint of the SSH public key.'
    )
    key: Optional[str] = Field(
        None,
        description='Public key text in SSH format, defined by RFC4253 section 6.6.',
    )
    name: Optional[str] = Field(
        None, description='Output only. The canonical resource name.'
    )


class UniversalTwoFactor(BaseModel):
    appId: Optional[str] = Field(
        None, description='Application ID for the U2F protocol.'
    )


class WebAuthn(BaseModel):
    rpId: Optional[str] = Field(
        None, description='Relying party ID for Web Authentication.'
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class View(Enum):
    LOGIN_PROFILE_VIEW_UNSPECIFIED = 'LOGIN_PROFILE_VIEW_UNSPECIFIED'
    BASIC = 'BASIC'
    SECURITY_KEY = 'SECURITY_KEY'


class SecurityKey(BaseModel):
    privateKey: Optional[str] = Field(
        None, description='Hardware-backed private key text in SSH format.'
    )
    publicKey: Optional[str] = Field(
        None,
        description='Public key text in SSH format, defined by [RFC4253]("https://www.ietf.org/rfc/rfc4253.txt") section 6.6.',
    )
    universalTwoFactor: Optional[UniversalTwoFactor] = Field(
        None, description='The U2F protocol type.'
    )
    webAuthn: Optional[WebAuthn] = Field(
        None, description='The Web Authentication protocol type.'
    )


class LoginProfile(BaseModel):
    name: Optional[str] = Field(None, description='Required. A unique user ID.')
    posixAccounts: Optional[List[PosixAccount]] = Field(
        None, description='The list of POSIX accounts associated with the user.'
    )
    securityKeys: Optional[List[SecurityKey]] = Field(
        None, description='The registered security key credentials for a user.'
    )
    sshPublicKeys: Optional[Dict[str, SshPublicKey]] = Field(
        None,
        description='A map from SSH public key fingerprint to the associated key object.',
    )


class ImportSshPublicKeyResponse(BaseModel):
    details: Optional[str] = Field(
        None, description='Detailed information about import results.'
    )
    loginProfile: Optional[LoginProfile] = Field(
        None, description='The login profile information for the user.'
    )
